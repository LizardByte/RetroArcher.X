#!/bin/sh
#
# PROVIDE: retroarcher
# REQUIRE: DAEMON retroarcher
# KEYWORD: shutdown
#
# Add the following lines to /etc/rc.conf.local or /etc/rc.conf
# to enable this service:
#
# retroarcher_enable (bool): Set to NO by default.
#           Set it to YES to enable it.
# retroarcher_user:  The user account RetroArcher daemon runs as what
#           you want it to be. It uses 'retroarcher' user by
#           default. Do not sets it as empty or it will run
#           as root.
# retroarcher_dir:   Directory where RetroArcher lives.
#           Default: /usr/local/share/RetroArcher
# retroarcher_chdir:  Change to this directory before running RetroArcher.
#     Default is same as retroarcher_dir.
# retroarcher_pid:  The name of the pidfile to create.
#     Default is retroarcher.pid in retroarcher_dir.
PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

. /etc/rc.subr

name="retroarcher"
rcvar=${name}_enable

load_rc_config ${name}

: ${retroarcher_enable:="NO"}
: ${retroarcher_user:="retroarcher"}
: ${retroarcher_dir:="/usr/local/share/RetroArcher"}
: ${retroarcher_chdir:="${retroarcher_dir}"}
: ${retroarcher_pid:="${retroarcher_dir}/retroarcher.pid"}
: ${retroarcher_flags:=""}

status_cmd="${name}_status"
stop_cmd="${name}_stop"

command_interpreter="python"
command="${retroarcher_dir}/RetroArcher.py"
command_args="--daemon --pidfile ${retroarcher_pid} --quiet --nolaunch ${retroarcher_flags}"

# Ensure user is root when running this script.
if [ `id -u` != "0" ]; then
  echo "Oops, you should be root before running this!"
  exit 1
fi

verify_retroarcher_pid() {
    # Make sure the pid corresponds to the RetroArcher process.
    if [ -f ${retroarcher_pid} ]; then
      pid=`cat ${retroarcher_pid} 2>/dev/null`
      ps -p ${pid} | grep -q "python ${retroarcher_dir}/RetroArcher.py"
      return $?
    else
      return 0
    fi
}

# Try to stop RetroArcher cleanly by sending SIGTERM
retroarcher_stop() {
    echo "Stopping $name."
    verify_retroarcher_pid
    if [ -n "${pid}" ]; then
      kill ${pid}
      wait_for_pids ${pid}
      echo "Stopped."
    fi
}

retroarcher_status() {
    verify_retroarcher_pid
    if [ -n "${pid}" ]; then
      echo "$name is running as ${pid}."
    else
      echo "$name is not running."
    fi
}

run_rc_command "$1"
